# Licensed under the Open Font License https://openfontlicense.org/
# https://fonts.google.com/specimen/Open+Sans
# Code generated by font_to_py.py.
# Font: OpenSans-Regular.ttf Char set:  -./0123456789:Whknst
# Cmd: ./font_to_py.py -c .:-/ 0123456789Whknst OpenSans-Regular.ttf 10 opensans10.py
version = '0.42'

def height():
    return 10

def baseline():
    return 10

def max_width():
    return 12

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 116

_font =\
b'\x06\x00\x00\xf8\x08\x08\x18\x20\x20\x00\x20\x20\x03\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00'\
b'\x70\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x40'\
b'\x05\x00\x00\x10\x10\x10\x20\x20\x60\x40\x40\x80\x07\x00\x00\x38'\
b'\x44\x42\x42\x42\x42\x42\x44\x38\x07\x00\x00\x18\x28\x48\x08\x08'\
b'\x08\x08\x08\x08\x07\x00\x00\x38\x44\x04\x04\x08\x18\x30\x40\x7e'\
b'\x07\x00\x00\x78\x04\x04\x04\x38\x04\x02\x04\x7c\x07\x00\x00\x0c'\
b'\x0c\x14\x24\x44\x44\xfe\x04\x04\x07\x00\x00\x7c\x40\x40\x7c\x04'\
b'\x02\x02\x04\x78\x07\x00\x00\x1c\x20\x40\x7c\x46\x42\x42\x44\x3c'\
b'\x07\x00\x00\x7e\x04\x04\x0c\x08\x08\x10\x10\x20\x07\x00\x00\x3c'\
b'\x44\x44\x2c\x38\x44\x42\x46\x3c\x07\x00\x00\x38\x44\x42\x42\x46'\
b'\x3a\x04\x04\x78\x03\x00\x00\x00\x00\x40\x40\x00\x00\x00\x40\x40'\
b'\x0c\x00\x00\x00\x86\x10\x46\x20\x46\x20\x49\x20\x69\x60\x29\x40'\
b'\x31\x40\x30\xc0\x10\x80\x08\x00\x40\x40\x40\x5c\x62\x42\x42\x42'\
b'\x42\x42\x07\x00\x40\x40\x40\x44\x48\x50\x70\x48\x4c\x44\x08\x00'\
b'\x00\x00\x00\x5c\x62\x42\x42\x42\x42\x42\x06\x00\x00\x00\x00\x78'\
b'\x40\x40\x38\x0c\x04\x78\x05\x00\x00\x40\x40\xf0\x40\x40\x40\x40'\
b'\x40\x30'

_index =\
b'\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x24\x00'\
b'\x30\x00\x3c\x00\x48\x00\x54\x00\x60\x00\x6c\x00\x78\x00\x84\x00'\
b'\x90\x00\x9c\x00\xa8\x00\xb4\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\xd6\x00\x00\x00\x00\x00\xe2\x00\x00\x00\x00\x00\xee\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\xfa\x00\x06\x01\x12\x01'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 32 + 1) if oc >= 32 and oc <= 116 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 10
    return _mvfont[doff + 2:next_offs], 10, width

